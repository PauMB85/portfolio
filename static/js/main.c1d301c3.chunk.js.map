{"version":3,"sources":["style/muiTheme.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","success","lightGreen","Home","React","lazy","Navbar","AboutMe","Skills","Footer","Contact","App","ThemeProvider","CssBaseline","className","fallback","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8RAoBeA,EAjBDC,YAAe,CAC5BC,QAAS,CACRC,QAAS,CACRC,KAAM,mBAEPC,UAAW,CACVD,KAAM,sBAEPE,MAAO,CACNF,KAAMG,IAAI,MAEXC,QAAS,CACRJ,KAAMK,IAAW,S,QCPdC,G,YAAOC,IAAMC,MAAK,kBAAM,wDACxBC,EAASF,IAAMC,MAAK,kBAAM,8DAC1BE,EAAUH,IAAMC,MAAK,kBAAM,iCAC3BG,EAASJ,IAAMC,MAAK,kBAAM,wDAC1BI,EAASL,IAAMC,MAAK,kBAAM,8DAC1BK,EAAUN,IAAMC,MAAK,kBAAM,+DAkClBM,MA/Bf,WACC,OACC,kBAACC,EAAA,EAAD,CAAenB,MAAOA,GACrB,kBAACoB,EAAA,EAAD,MACA,yBAAKC,UAAU,6BAEd,kBAAC,WAAD,CAAUC,SAAU,gDACnB,6BAASC,GAAG,QACX,kBAACb,EAAD,OAED,kBAACG,EAAD,MAEA,6BAASU,GAAG,SACX,kBAACT,EAAD,OAGD,6BAASS,GAAG,UACX,kBAACR,EAAD,OAGD,6BAASQ,GAAG,WACX,kBAACN,EAAD,OAGD,kBAACD,EAAD,UC5BCQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAA1C,GACLsC,QAAQtC,MAAM,4CAA6CA,MC1FjE2C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,IAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,IAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.c1d301c3.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport { lightGreen, red } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tprimary: {\n\t\t\tmain: 'rgb(33, 36, 46)'\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: 'rgb(100, 255, 218)'\n\t\t},\n\t\terror: {\n\t\t\tmain: red[400]\n\t\t},\n\t\tsuccess: {\n\t\t\tmain: lightGreen[600]\n\t\t}\n\t}\n});\n\nexport default theme;\n","import React, { Suspense } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport theme from './style/muiTheme';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport './App.scss';\nimport './style/commons.scss';\nconst Home = React.lazy(() => import('./components/home/Home'));\nconst Navbar = React.lazy(() => import('./components/navbar/Navbar'));\nconst AboutMe = React.lazy(() => import('./components/about/AboutMe'));\nconst Skills = React.lazy(() => import('./components/skills/Skills'));\nconst Footer = React.lazy(() => import('./components/footer/Footer'));\nconst Contact = React.lazy(() => import('./components/contact/Contact'));\n\n\nfunction App() {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<CssBaseline />\n\t\t\t<div className=\"overflow-wrap flex-column\">\n\t\t\t\t{/* Home */}\n\t\t\t\t<Suspense fallback={<h2>I am loading...</h2>}>\n\t\t\t\t\t<section id=\"home\">\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</section>\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t{/* about me */}\n\t\t\t\t\t<section id=\"about\">\n\t\t\t\t\t\t<AboutMe />\n\t\t\t\t\t</section>\n\t\t\t\t\t{/* skills */}\n\t\t\t\t\t<section id=\"skills\">\n\t\t\t\t\t\t<Skills />\n\t\t\t\t\t</section>\n\t\t\t\t\t{/* contact */}\n\t\t\t\t\t<section id=\"contact\">\n\t\t\t\t\t\t<Contact />\n\t\t\t\t\t</section>\n\t\t\t\t\t{/* footer */}\n\t\t\t\t\t<Footer />\n\t\t\t\t</Suspense>\n\t\t\t</div>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}