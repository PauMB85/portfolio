{"version":3,"sources":["style/muiTheme.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","success","lightGreen","Home","React","lazy","Navbar","AboutMe","Skills","Contact","Footer","App","ThemeProvider","CssBaseline","className","fallback","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8RAoBeA,EAjBDC,YAAe,CAC5BC,QAAS,CACRC,QAAS,CACRC,KAAM,mBAEPC,UAAW,CACVD,KAAM,sBAEPE,MAAO,CACNF,KAAMG,IAAI,MAEXC,QAAS,CACRJ,KAAMK,IAAW,S,QCPdC,G,YAAOC,IAAMC,MAAK,kBAAM,wDACxBC,EAASF,IAAMC,MAAK,kBAAM,8DAC1BE,EAAUH,IAAMC,MAAK,kBAAM,iCAC3BG,EAASJ,IAAMC,MAAK,kBAAM,wDAC1BI,EAAUL,IAAMC,MAAK,kBAAM,+DAC3BK,EAASN,IAAMC,MAAK,kBAAM,8DAkCjBM,MA/Bf,WACC,OACC,kBAACC,EAAA,EAAD,CAAenB,MAAOA,GACrB,kBAACoB,EAAA,EAAD,MACA,yBAAKC,UAAU,6BAEd,kBAAC,WAAD,CAAUC,SAAU,gDACnB,6BAASC,GAAG,QACX,kBAACb,EAAD,OAED,kBAACG,EAAD,MAEA,6BAASU,GAAG,SACX,kBAACT,EAAD,OAGD,6BAASS,GAAG,UACX,kBAACR,EAAD,OAGD,6BAASQ,GAAG,WACX,kBAACP,EAAD,OAGD,kBAACC,EAAD,UC5BCO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAA1C,GACLsC,QAAQtC,MAAM,4CAA6CA,MC1FjE2C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,aAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,aAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.7e58bec4.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\nimport { lightGreen, red } from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: {\r\n\t\t\tmain: 'rgb(33, 36, 46)'\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tmain: 'rgb(100, 255, 218)'\r\n\t\t},\r\n\t\terror: {\r\n\t\t\tmain: red[400]\r\n\t\t},\r\n\t\tsuccess: {\r\n\t\t\tmain: lightGreen[600]\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default theme;\r\n","import React, { Suspense } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport theme from './style/muiTheme';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport './App.scss';\r\nimport './style/commons.scss';\r\nconst Home = React.lazy(() => import('./components/home/Home'));\r\nconst Navbar = React.lazy(() => import('./components/navbar/Navbar'));\r\nconst AboutMe = React.lazy(() => import('./components/about/AboutMe'));\r\nconst Skills = React.lazy(() => import('./components/skills/Skills'));\r\nconst Contact = React.lazy(() => import('./components/contact/Contact'));\r\nconst Footer = React.lazy(() => import('./components/footer/Footer'));\r\n\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<div className=\"overflow-wrap flex-column\">\r\n\t\t\t\t{/* Home */}\r\n\t\t\t\t<Suspense fallback={<h2>I am loading...</h2>}>\r\n\t\t\t\t\t<section id=\"home\">\r\n\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t<Navbar />\r\n\t\t\t\t\t{/* about me */}\r\n\t\t\t\t\t<section id=\"about\">\r\n\t\t\t\t\t\t<AboutMe />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t{/* skills */}\r\n\t\t\t\t\t<section id=\"skills\">\r\n\t\t\t\t\t\t<Skills />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t{/* contact */}\r\n\t\t\t\t\t<section id=\"contact\">\r\n\t\t\t\t\t\t<Contact />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t{/* footer */}\r\n\t\t\t\t\t<Footer />\r\n\t\t\t\t</Suspense>\r\n\t\t\t</div>\r\n\t\t</ThemeProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}